<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo-部署到 Github</title>
    <url>/post/2909f9b8/</url>
    <content><![CDATA[<p>将自己搭建好的博客部署到 <strong>github</strong> 上。</p>
<a id="more"></a>

<h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>自己注册一个 <strong>Github</strong> 账号，在 Github 上创建一个空的仓库</p>
<p><strong>注意：</strong>创建的仓库名必须是 <strong>用户名.github.io</strong> 不然创建的仓库无法访问</p>
<h3 id="第二步：下载插件（blog下cmd）"><a href="#第二步：下载插件（blog下cmd）" class="headerlink" title="第二步：下载插件（blog下cmd）"></a>第二步：下载插件（blog下cmd）</h3><p><code>cnpm install --save hexo-deployer-git</code></p>
<h3 id="第三步：配置SSH"><a href="#第三步：配置SSH" class="headerlink" title="第三步：配置SSH"></a>第三步：配置SSH</h3><p>①：git bash 中输入 <code>ssh-keygen -t rsa</code>，然后一直回车就可以了生成密钥</p>
<p>②：产看密钥</p>
<p>​        在一个 <strong>.ssh</strong> 文件下打开 <strong>id_rsa.pub</strong> 文件（记事本打开就行），复制里面的全部内容</p>
<p>③：粘贴到 <strong>Github</strong> 中</p>
<img data-src="/post/2909f9b8/1.png" class>

<img data-src="/post/2909f9b8/2.png" class>

<h3 id="第四步：配置-blog-下的-config-yml-文件"><a href="#第四步：配置-blog-下的-config-yml-文件" class="headerlink" title="第四步：配置 blog 下的 _config.yml 文件"></a>第四步：配置 blog 下的 _config.yml 文件</h3><p>①：先获取创建的 Github 仓库的 ssh 地址</p>
<img data-src="/post/2909f9b8/3.png" class>

<p>②：打开 <strong>_config.yml</strong> 在最下面填入以下内容</p>
<img data-src="/post/2909f9b8/4.png" class>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>: <span class="string">&#x27;git&#x27;</span></span><br><span class="line">repository: 你的仓库SSH地址</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>

<p><strong>注意：每一个 : 后都要记得填空格</strong></p>
<h3 id="第五步：将-hexo-推送到远程-Github"><a href="#第五步：将-hexo-推送到远程-Github" class="headerlink" title="第五步：将 hexo 推送到远程 Github"></a>第五步：将 hexo 推送到远程 Github</h3><p>①：<code>hexo g</code> 生成一下静态文件相当于更新一下你的修改过的内容</p>
<p>②：<code>hexo d </code> 将hexo部署到远端</p>
<p>​        <strong>注意：若是没有配置 ssh 使用的 https 在部署的时候要输入 Github 的账号和密码</strong></p>
<p>③：或是直接使用命令<code>hexo generate -d</code> 直接完成上述的连哥哥步骤</p>
<p>④：检查是否部署成功</p>
<img data-src="/post/2909f9b8/5.png" class>]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-搭建个人博客</title>
    <url>/post/a71719e7/</url>
    <content><![CDATA[<p>搭建一个属于自己的博客，使用 <strong>hexo</strong> 框架快速的搭建。</p>
<a id="more"></a>

<h3 id="第一步：环境配置"><a href="#第一步：环境配置" class="headerlink" title="第一步：环境配置"></a>第一步：环境配置</h3><p>window环境下：</p>
<ul>
<li><p><strong>nodejs 下载</strong></p>
<p><code>https://nodejs.org/zh-cn/</code></p>
</li>
<li><p><strong>npm：npm使用淘宝源</strong></p>
<p><code>npm config set registry https://registry.npm.taobao.org</code></p>
</li>
<li><p><strong>git for window 下载</strong></p>
<p><code>https://gitforwindows.org/</code></p>
</li>
</ul>
<h3 id="第二步：配置环境变量"><a href="#第二步：配置环境变量" class="headerlink" title="第二步：配置环境变量"></a>第二步：配置环境变量</h3><img data-src="/post/a71719e7/1.png" class>

<h3 id="第三步：下载hexo框架"><a href="#第三步：下载hexo框架" class="headerlink" title="第三步：下载hexo框架"></a>第三步：下载hexo框架</h3><p>①：在终端执行下面步骤</p>
<p><strong>cmd：</strong></p>
<p>​    <code>npm install hexo-cli -g</code></p>
<p>**或用  **</p>
<p><strong>git bash ：</strong></p>
<p>​    <code>npm install hexo-cli -g</code></p>
<p>②：查看是否安装成功：</p>
<p><code>hexo -v</code></p>
<img data-src="/post/a71719e7/2.png" class>

<h3 id="第四步：初始化hexo"><a href="#第四步：初始化hexo" class="headerlink" title="第四步：初始化hexo"></a>第四步：初始化hexo</h3><p>①：在你建立好的文件夹下初始化hexo</p>
<p><code>hexo init</code></p>
<p><strong>注意：</strong>要是此步骤太慢一直卡着，回到 <strong>第一步 **将 **npm</strong> 的源修改成 <strong>淘宝源</strong></p>
<p>②：查看文件夹里的内容</p>
<img data-src="/post/a71719e7/3.png" class>

<h3 id="第五步：本地测试hexo"><a href="#第五步：本地测试hexo" class="headerlink" title="第五步：本地测试hexo"></a>第五步：本地测试hexo</h3><p>①：在终端中输入<code>hexo s</code>(这里的终端打开位置是在你建立的博客文件下打开的，下面的都是一样不再重复)</p>
<img data-src="/post/a71719e7/4.png" class>

<p>②：本地浏览器打开（地址：<a href="http://localhost:4000）">http://localhost:4000）</a></p>
<img data-src="/post/a71719e7/5.png" class>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-使用next主题</title>
    <url>/post/407bd25/</url>
    <content><![CDATA[<p> <strong>hexo</strong> 为我们提供了很多的主题样式，其中 <strong>next</strong> 是使用比较广泛的，下面是我对 <strong>next</strong> 主题的一些配置。</p>
<a id="more"></a>]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-图片无法显示解决方案</title>
    <url>/post/8e334b5e/</url>
    <content><![CDATA[<p>我们在建立了博客时后可能在上传图片时会出现图片无法显示的情况，下面给出解决方案</p>
<a id="more"></a>

<h3 id="1-安装插件-hexo-asset-image"><a href="#1-安装插件-hexo-asset-image" class="headerlink" title="1.安装插件 hexo-asset-image"></a>1.安装插件 hexo-asset-image</h3><p><code>npm install hexo-asset-image --save</code></p>
<p>这个是将图片插入路径转换的插件</p>
<h3 id="2-在hexo的-config-yml中开启功能"><a href="#2-在hexo的-config-yml中开启功能" class="headerlink" title="2.在hexo的_config.yml中开启功能"></a>2.在hexo的_config.yml中开启功能</h3><p><code>post_asset_folder: true</code></p>
<h3 id="3-打开-blog-node-modules-hexo-asset-image-index-js-文件"><a href="#3-打开-blog-node-modules-hexo-asset-image-index-js-文件" class="headerlink" title="3.打开 blog\node_modules\hexo-asset-image\index.js 文件"></a>3.打开 blog\node_modules\hexo-asset-image\index.js 文件</h3><p><strong>将里面的内容删除或者注释，将下面的内容复制进去</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">config.post_asset_folder</span>)</span>&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">			  <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			  $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">			  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「Ericam_」的原创文章，遵循 CC <span class="number">4.0</span> BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/xjm850552586/article/details/84101345</span></span><br></pre></td></tr></table></figure>

<h3 id="4-使用下面的命令引用图片"><a href="#4-使用下面的命令引用图片" class="headerlink" title="4.使用下面的命令引用图片"></a>4.使用下面的命令引用图片</h3><p>之前的markdown语法只能在本地才能显示出来，上传后是无法显示的，要使用下面的命令：</p>
<p><code>&#123;% asset_img example.jpg This is an example image %&#125;</code></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>《如果大雪封门》</title>
    <url>/post/e3b2664d/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>摘抄</tag>
      </tags>
  </entry>
  <entry>
    <title>Everything搜索U盘文件</title>
    <url>/post/a42fef2c/</url>
    <content><![CDATA[<p>everything工具在使用的时候无法查找到自己U盘内的文件，原因是everything只能搜索NTFS格式，U盘的文件格式可能并不是NTFS格式，具体的邮件U盘属性中 “常规” → “文件系统” 查看</p>
<a id="more"></a>
<p><strong>一、打开 everything 菜单栏中 “工具” → “选项”</strong></p>
<img data-src="/post/a42fef2c/1.png" class>

<p><strong>二、选择 “文件夹” 然后点击 ”添加“ 将自己的U盘添加进去，再点击 ”确定“</strong></p>
<img data-src="/post/a42fef2c/2.png" class>

<p>然后就可以搜索得到U盘中的文件了</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu20.04 配置 python 的环境</title>
    <url>/post/1598b4f7/</url>
    <content><![CDATA[<p>首先，ubuntu20.04 的版本已经安装好了 Python3.8 所以无需再去下载 python</p>
<!---->

<h2 id="pip3"><a href="#pip3" class="headerlink" title="pip3"></a>pip3</h2><p>pip3 是用来安装 Python 软件包的工具</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>sudo apt-get install python3-pip</code></p>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p><code>suod pip3 install --upgrade pip</code></p>
<h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p><code>sudo apt-get remove python3-pip</code></p>
<h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><p>第一步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;.pip</span><br><span class="line">vim ~&#x2F;.pip&#x2F;pip.conf</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>vim 没有安装的可以使用 vi ，或者根据提示 <code>sudo apt install vim</code> 安装 vim</p>
<p>第二步：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url = http://mirrors.aliyun.<span class="keyword">com</span>/pypi/simple/</span><br><span class="line"> </span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.<span class="keyword">com</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>首先按 i 进入编辑模式，编辑完后按 wq 退出保存</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li><p><strong>安装</strong></p>
<ul>
<li><p>安装最新版本：<code>pip3 install package_name</code></p>
</li>
<li><p>安装指定版本：<code>pip3 install packge_name==版本号  </code></p>
</li>
</ul>
</li>
<li><p><strong>升级</strong></p>
<ul>
<li><code>pip3 install --upgrade package_name</code></li>
</ul>
</li>
<li><p><strong>列出</strong></p>
<ul>
<li><code>pip3 list</code></li>
</ul>
</li>
<li><p><strong>卸载</strong></p>
<ul>
<li><code>pip3 uninstall package_name</code></li>
</ul>
</li>
</ul>
<h2 id="ipython3"><a href="#ipython3" class="headerlink" title="ipython3"></a>ipython3</h2><p>一个增强型的 python 交互工具</p>
<p><code>sudo apt install ipython3</code></p>
<h2 id="python虚拟环境的配置"><a href="#python虚拟环境的配置" class="headerlink" title="python虚拟环境的配置"></a>python虚拟环境的配置</h2><ul>
<li><p>安装虚拟环境</p>
<p><code>sudo pip install virtualenv </code></p>
</li>
<li><p>安装虚拟环境扩展包</p>
<p><code>sudo pip install virtualenvwrapper</code></p>
</li>
<li><p>编辑家目录下的 <strong>.bashrc</strong> 文件，添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export WORKON_HOME&#x3D;$HOME&#x2F;.virtualenvs</span><br><span class="line">source &#x2F;usr&#x2F;local&#x2F;bin&#x2F;virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>

<p>添加退出编辑器之后：<code>source .bashrc</code></p>
</li>
<li><p>创建虚拟环境</p>
<p><code>mkvirtualenv -p python3 [虚拟环境名称]</code> 结果如下图：</p>
</li>
</ul>
<img data-src="/post/1598b4f7/1.png" class>

<p><strong>注意：</strong>这个虚拟环境除了安装的包和使用的python是在虚拟环境外，其他操作都是和真机无异。</p>
<ul>
<li><p>退出虚拟环境</p>
<p><code>deactivate</code></p>
</li>
<li><p>进入虚拟环境</p>
<p><code>workon [虚拟环境名称]</code></p>
</li>
<li><p>删除虚拟环境</p>
<p><code>rmvirtualenv [虚拟环境名称]</code></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
